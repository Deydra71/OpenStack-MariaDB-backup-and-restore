- name: Check if any database is selected for the restoration
  fail:
    msg: "No database selected for the restoration. Please provide a value for selected_backups in the Variables box."
  when: selected_backups is not defined

- name: Check if selected databases are valid
  fail:
    msg: "Invalid database selected for the restoration: {{ item }}. Please select a valid database from the following list: {{ mariadb_databases }}"
  when: item not in mariadb_databases and item != 'all'
  loop: "{{ selected_backups }}"

- name: Add _dump.sql to selected backups
  set_fact:
    backup_files: "{{ backup_files | default([]) + [item + '_dump.sql'] }}"
  with_items: "{{ mariadb_databases if 'all' in selected_backups else selected_backups }}"

- name: Check if the backup directory exists
  stat:
    path: "{{ backup_dir }}"
  register: backup_dir_status
  failed_when: backup_dir_status.stat.exists == false

- name: Check if the {{ backup_files }} files exist in the path
  stat:
    path: "{{ backup_dir }}/{{ item }}"
  loop: "{{ backup_files }}"
  register: backup_files_status
  failed_when: backup_files_status is failed
  changed_when: false
  ignore_errors: true

- name: Fail if any of the backup files are missing
  fail:
    msg: "Backup file {{ item.item }} not found in {{ backup_dir }}"
  loop: "{{ backup_files_status.results }}"
  when: item.stat.exists == false

- name: Check if Docker is installed
  stat:
    path: /usr/bin/docker
  register: docker_installed
  failed_when: docker_installed.stat.exists == false

- name: Check if MariaDB container is running
  docker_container_info:
    name: mariadb
  register: mariadb_container_info
  failed_when: mariadb_container_info is not defined or
                mariadb_container_info.container.State.Status != "running"

- name: Create the 'backup before restore' directory
  command: "mkdir {{ backup_dir }}/backup_before_restore"
  ignore_errors: true

- name: Start the restore process
  include_role:
    name: ../roles/restore_database
  vars:
    database: "{{ item.0 }}"
    database_name: "{{ item.1 }}"
  loop: "{{ backup_files|zip(mariadb_databases if 'all' in selected_backups else selected_backups) }}"

