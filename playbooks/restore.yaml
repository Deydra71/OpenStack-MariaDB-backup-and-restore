- name: Prepare MariaDB for backup
  hosts: 10.10.1.11
  become: yes
  vars_files:
    - ../globals.yaml

  tasks:
    - name: Check if any database is selected for the restoration
      fail:
        msg: "No database selected for the restoration. Please provide a value for  selected_backups in the Variables box."
      when:  selected_backups is not defined

    - name: Check if selected databases are valid
      fail:
        msg: "Invalid database selected for the restoration: {{ item }}. Please select a valid database from the mariadb_databases list."
      when: item not in mariadb_databases
      loop: "{{ selected_backups }}"

    - name: Add _dump.sql to selected backups
      set_fact:
        backup_files: "{{ backup_files | default([]) + [item + '_dump.sql'] }}"
      loop: "{{ selected_backups }}"

    - name: Check if the {{ backup_files }} files exist in the path
      stat:
        path: "/tmp/{{ item }}"
      loop: "{{ backup_files }}"
      register: backup_files_status
      failed_when: backup_files_status is failed
      changed_when: false
      ignore_errors: true

    - name: Fail if any of the backup files are missing
      fail:
        msg: "Backup file {{ item.item }} not found in /tmp/"
      loop: "{{ backup_files_status.results }}"
      when: item.stat.exists == false
        
    - name: Check if the backup files are valid SQL files
      shell: head -n 1 /tmp/{{ item }} | grep "^--"
      register: sql_check
      failed_when: sql_check.rc != 0
      ignore_errors: true
      loop: "{{ backup_files }}"
      when: item.endswith('.sql')

    - name: Fail if invalid SQL files are found
      fail:
        msg: "Invalid SQL files found: {{ invalid_files | join(', ') }}"
      when: invalid_files | length > 0
      vars:
        invalid_files: "{{ [item.item for item in sql_check.results if item.failed and item.item.endswith('.sql')] }}"

    - name: Check if Docker is installed
      become: yes
      stat:
        path: /usr/bin/docker
      register: docker_installed
      failed_when: docker_installed.stat.exists == False

    - name: Check if MariaDB container is running
      become: yes
      docker_container_info:
        name: mariadb
      register: mariadb_container_info
      failed_when: mariadb_container_info is not defined or
                    mariadb_container_info.container.State.Status != "running"